using System;
using System.Collections.Generic;
using System.Linq;

class MerkleHellmanKnapsack
{
    public static (int[], int, int) GeneratePrivateKey(int size)
    {
        Random random = new Random();

        int[] superIncreasingKnapsack = new int[size];
        superIncreasingKnapsack[0] = random.Next(1, 10);
        for (int i = 1; i < size; i++)
        {
            superIncreasingKnapsack[i] = superIncreasingKnapsack.Take(i).Sum() + random.Next(1, 10);
        }
        int modulus = superIncreasingKnapsack.Sum() + random.Next(10, 20);

        int multiplier;
        do
        {
            multiplier = random.Next(2, modulus);
        } while (GCD(multiplier, modulus) != 1);

        return (superIncreasingKnapsack, modulus, multiplier);
    }

    public static int GCD(int a, int b)
    {
        while (b != 0)
        {
            int temp = b;
            b = a % b;
            a = temp;
        }
        return a;
    }

    public static int[] GeneratePublicKey(int[] privateKey, int modulus, int multiplier)
    {
        return privateKey.Select(x => (x * multiplier) % modulus).ToArray();
    }

    public static int Encrypt(int[] publicKey, string binaryMessage)
    {
        int[] binary = binaryMessage.Select(c => c - '0').ToArray();
        return binary.Zip(publicKey, (b, k) => b * k).Sum();
    }

    public static string Decrypt(int encryptedMessage, int[] privateKey, int modulus, int multiplier)
    {

        int inverseMultiplier = ModularInverse(multiplier, modulus);

        int reducedMessage = (encryptedMessage * inverseMultiplier) % modulus;

        List<int> binaryMessage = new List<int>();
        for (int i = privateKey.Length - 1; i >= 0; i--)
        {
            if (reducedMessage >= privateKey[i])
            {
                binaryMessage.Add(1);
                reducedMessage -= privateKey[i];
            }
            else
            {
                binaryMessage.Add(0);
            }
        }

        binaryMessage.Reverse();
        return string.Join("", binaryMessage);
    }

    public static int ModularInverse(int a, int m)
    {
        int m0 = m, t, q;
        int x0 = 0, x1 = 1;

        if (m == 1)
            return 0;

        while (a > 1)
        {
            q = a / m;
            t = m;
            m = a % m;
            a = t;
            t = x0;
            x0 = x1 - q * x0;
            x1 = t;
        }

        if (x1 < 0)
            x1 += m0;

        return x1;
    }

    static void Main(string[] args)
    {
        int size = 8;

        var (privateKey, modulus, multiplier) = GeneratePrivateKey(size);

        int[] publicKey = GeneratePublicKey(privateKey, modulus, multiplier);

        Console.WriteLine("Cheia privată: " + string.Join(", ", privateKey));
        Console.WriteLine("Modul: " + modulus);
        Console.WriteLine("Multiplicator: " + multiplier);
        Console.WriteLine("Cheia publică: " + string.Join(", ", publicKey));

        string message = "10101010";
        Console.WriteLine("Mesaj original: " + message);

        int encryptedMessage = Encrypt(publicKey, message);
        Console.WriteLine("Mesaj criptat: " + encryptedMessage);

        string decryptedMessage = Decrypt(encryptedMessage, privateKey, modulus, multiplier);
        Console.WriteLine("Mesaj decriptat: " + decryptedMessage);
    }
}
